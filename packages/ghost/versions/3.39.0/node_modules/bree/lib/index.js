"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var EventEmitter = require('events');

var fs = require('fs');

var _require = require('path'),
    resolve = _require.resolve,
    join = _require.join;

var pWaitFor = require('p-wait-for');

var combineErrors = require('combine-errors');

var cron = require('cron-validate');

var debug = require('debug')('bree');

var humanInterval = require('human-interval');

var isSANB = require('is-string-and-not-blank');

var isValidPath = require('is-valid-path');

var later = require('@breejs/later');

var ms = require('ms');

var threads = require('bthreads');

var _require2 = require('boolean'),
    boolean = _require2.boolean;

var _require3 = require('safe-timers'),
    setTimeout = _require3.setTimeout,
    setInterval = _require3.setInterval; // bthreads requires us to do this for web workers (see bthreads docs for insight)


threads.Buffer = Buffer; // instead of `threads.browser` checks below, we previously used this boolean
// const hasFsStatSync = typeof fs === 'object' && typeof fs.statSync === 'function';

var Bree = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2.default)(Bree, _EventEmitter);

  var _super = _createSuper(Bree);

  function Bree(config) {
    var _this;

    (0, _classCallCheck2.default)(this, Bree);
    _this = _super.call(this);
    _this.config = _objectSpread({
      // we recommend using Cabin for logging
      // <https://cabinjs.com>
      logger: console,
      // set this to `false` to prevent requiring a root directory of jobs
      // (e.g. if your jobs are not all in one directory)
      root: threads.browser ?
      /* istanbul ignore next */
      threads.resolve('jobs') : resolve('jobs'),
      // default timeout for jobs
      // (set this to `false` if you do not wish for a default timeout to be set)
      timeout: 0,
      // default interval for jobs
      // (set this to `0` for no interval, and > 0 for a default interval to be set)
      interval: 0,
      // this is an Array of your job definitions (see README for examples)
      jobs: [],
      // <https://breejs.github.io/later/parsers.html#cron>
      // (can be overridden on a job basis with same prop name)
      hasSeconds: false,
      // <https://github.com/Airfooox/cron-validate>
      cronValidate: {},
      // if you set a value > 0 here, then it will terminate workers after this time (ms)
      closeWorkerAfterMs: 0,
      // could also be mjs if desired
      // (this is the default extension if you just specify a job's name without ".js" or ".mjs")
      defaultExtension: 'js',
      // default worker options to pass to ~`new Worker`~ `new threads.Worker`
      // (can be overridden on a per job basis)
      // <https://nodejs.org/api/worker_threads.html#worker_threads_new_worker_filename_options>
      worker: {},
      //
      // if you set this to `true`, then a second arg is passed to log output
      // and it will be an Object with `{ worker: Object }` set, for example:
      // (see the documentation at <https://nodejs.org/api/worker_threads.html> for more insight)
      //
      // logger.info('...', {
      //   worker: {
      //     isMainThread: Boolean
      //     resourceLimits: Object,
      //     threadId: String
      //   }
      // });
      //
      outputWorkerMetadata: false
    }, config); //
    // if `hasSeconds` is `true` then ensure that
    // `cronValidate` object has `override` object with `useSeconds` set to `true`
    // <https://github.com/breejs/bree/issues/7>
    //

    if (_this.config.hasSeconds) _this.config.cronValidate = _objectSpread(_objectSpread({}, _this.config.cronValidate), {}, {
      preset: _this.config.cronValidate && _this.config.cronValidate.preset ? _this.config.cronValidate.preset : 'default',
      override: _objectSpread(_objectSpread({}, _this.config.cronValidate && _this.config.cronValidate.override ? _this.config.cronValidate.override : {}), {}, {
        useSeconds: true
      })
    });
    debug('config', _this.config);
    _this.closeWorkerAfterMs = {};
    _this.workers = {};
    _this.timeouts = {};
    _this.intervals = {};
    _this.validateJob = _this.validateJob.bind((0, _assertThisInitialized2.default)(_this));
    _this.getWorkerMetadata = _this.getWorkerMetadata.bind((0, _assertThisInitialized2.default)(_this));
    _this.run = _this.run.bind((0, _assertThisInitialized2.default)(_this));
    _this.start = _this.start.bind((0, _assertThisInitialized2.default)(_this));
    _this.stop = _this.stop.bind((0, _assertThisInitialized2.default)(_this));
    _this.add = _this.add.bind((0, _assertThisInitialized2.default)(_this));
    _this.remove = _this.remove.bind((0, _assertThisInitialized2.default)(_this)); // validate root (sync check)

    if (isSANB(_this.config.root)) {
      /* istanbul ignore next */
      if (!threads.browser && isValidPath(_this.config.root)) {
        var stats = fs.statSync(_this.config.root);
        if (!stats.isDirectory()) throw new Error("Root directory of ".concat(_this.config.root, " does not exist"));
      }
    } // validate timeout


    _this.config.timeout = _this.parseValue(_this.config.timeout);
    debug('timeout', _this.config.timeout); // validate interval

    _this.config.interval = _this.parseValue(_this.config.interval);
    debug('interval', _this.config.interval); //
    // if `this.config.jobs` is an empty array
    // then we should try to load `jobs/index.js`
    //

    if (_this.config.root && (!Array.isArray(_this.config.jobs) || _this.config.jobs.length === 0)) {
      try {
        _this.config.jobs = threads.require(_this.config.root);
      } catch (err) {
        _this.config.logger.error(err);
      }
    } //
    // validate jobs
    //


    if (!Array.isArray(_this.config.jobs)) throw new Error('Jobs must be an Array'); // provide human-friendly errors for complex configurations

    var errors = [];
    /*
    jobs = [
      'name',
      { name: 'boot' },
      { name: 'timeout', timeout: ms('3s') },
      { name: 'cron', cron: '* * * * *' },
      { name: 'cron with timeout', timeout: '3s', cron: '* * * * *' },
      { name: 'interval', interval: ms('4s') }
      { name: 'interval', path: '/some/path/to/script.js', interval: ms('4s') },
      { name: 'timeout', timeout: 'three minutes' },
      { name: 'interval', interval: 'one minute' },
      { name: 'timeout', timeout: '3s' },
      { name: 'interval', interval: '30d' },
      { name: 'schedule object', interval: { schedules: [] } }
    ]
    */

    for (var i = 0; i < _this.config.jobs.length; i++) {
      try {
        _this.config.jobs[i] = _this.validateJob(_this.config.jobs[i], i);
      } catch (err) {
        errors.push(err);
      }
    } // if there were any errors then throw them


    if (errors.length > 0) throw combineErrors(errors);
    debug('this.config.jobs', _this.config.jobs);
    return _this;
  }

  (0, _createClass2.default)(Bree, [{
    key: "getName",
    value: function getName(job) {
      if (isSANB(job)) return job;
      if ((0, _typeof2.default)(job) === 'object' && isSANB(job.name)) return job.name;
      if (typeof job === 'function' && isSANB(job.name)) return job.name;
    } // eslint-disable-next-line complexity

  }, {
    key: "validateJob",
    value: function validateJob(job, i) {
      var isAdd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var errors = [];
      var names = [];

      if (isAdd) {
        var name = this.getName(job);
        if (name) names.push(name);else errors.push(new Error("Job #".concat(i + 1, " is missing a name")));
      }

      for (var j = 0; j < this.config.jobs.length; j++) {
        var _name = this.getName(this.config.jobs[j]);

        if (!_name) {
          errors.push(new Error("Job #".concat(i + 1, " is missing a name")));
          continue;
        } // throw an error if duplicate job names


        if (names.includes(_name)) errors.push(new Error("Job #".concat(j + 1, " has a duplicate job name of ").concat(job)));
        names.push(_name);
      }

      if (errors.length > 0) throw combineErrors(errors); // support a simple string which we will transform to have a path

      if (isSANB(job)) {
        // don't allow a job to have the `index` file name
        if (['index', 'index.js', 'index.mjs'].includes(job)) throw new Error('You cannot use the reserved job name of "index", "index.js", nor "index.mjs"');

        if (!this.config.root) {
          errors.push(new Error("Job #".concat(i + 1, " \"").concat(job, "\" requires root directory option to auto-populate path")));
          throw combineErrors(errors);
        }

        var path = join(this.config.root, job.endsWith('.js') || job.endsWith('.mjs') ? job : "".concat(job, ".").concat(this.config.defaultExtension));
        /* istanbul ignore next */

        if (!threads.browser) {
          var stats = fs.statSync(path);
          if (!stats.isFile()) throw new Error("Job #".concat(i + 1, " \"").concat(job, "\" path missing: ").concat(path));
        }

        return {
          name: job,
          path: path,
          timeout: this.config.timeout,
          interval: this.config.interval
        };
      } // job is a function


      if (typeof job === 'function') {
        var _path = "(".concat(job.toString(), ")()"); // can't be a built-in or bound function


        if (_path.includes('[native code]')) errors.push(new Error("Job #".concat(i + 1, " can't be a bound or built-in function")));
        if (errors.length > 0) throw combineErrors(errors);
        return {
          name: job.name,
          path: _path,
          worker: {
            eval: true
          },
          timeout: this.config.timeout,
          interval: this.config.interval
        };
      } // use a prefix for errors


      var prefix = "Job #".concat(i + 1, " named \"").concat(job.name, "\"");

      if (typeof job.path === 'function') {
        var _path2 = "(".concat(job.path.toString(), ")()"); // can't be a built-in or bound function


        if (_path2.includes('[native code]')) errors.push(new Error("Job #".concat(i + 1, " can't be a bound or built-in function")));
        job.path = _path2;
        job.worker = _objectSpread({
          eval: true
        }, job.worker);
      } else if (!isSANB(job.path) && !this.config.root) {
        errors.push(new Error("".concat(prefix, " requires root directory option to auto-populate path")));
      } else {
        // validate path
        var _path3 = isSANB(job.path) ? job.path : join(this.config.root, job.name.endsWith('.js') || job.name.endsWith('.mjs') ? job.name : "".concat(job.name, ".").concat(this.config.defaultExtension));

        if (isValidPath(_path3)) {
          try {
            /* istanbul ignore next */
            if (!threads.browser) {
              var _stats = fs.statSync(_path3); // eslint-disable-next-line max-depth


              if (!_stats.isFile()) throw new Error("".concat(prefix, " path missing: ").concat(_path3));
            }

            if (!isSANB(job.path)) job.path = _path3;
          } catch (err) {
            errors.push(err);
          }
        } else {
          // assume that it's a transformed eval string
          job.worker = _objectSpread({
            eval: true
          }, job.worker);
        }
      } // don't allow users to mix interval AND cron


      if (typeof job.interval !== 'undefined' && typeof job.cron !== 'undefined') {
        errors.push(new Error("".concat(prefix, " cannot have both interval and cron configuration")));
      } // don't allow users to mix timeout AND date


      if (typeof job.timeout !== 'undefined' && typeof job.date !== 'undefined') errors.push(new Error("".concat(prefix, " cannot have both timeout and date"))); // don't allow a job to have the `index` file name

      if (['index', 'index.js', 'index.mjs'].includes(job.name)) {
        errors.push(new Error('You cannot use the reserved job name of "index", "index.js", nor "index.mjs"'));
        throw combineErrors(errors);
      } // validate date


      if (typeof job.date !== 'undefined' && !(job.date instanceof Date)) errors.push(new Error("".concat(prefix, " had an invalid Date of ").concat(job.date))); // validate timeout

      if (typeof job.timeout !== 'undefined') {
        try {
          job.timeout = this.parseValue(job.timeout);
        } catch (err) {
          errors.push(combineErrors([new Error("".concat(prefix, " had an invalid timeout of ").concat(job.timeout)), err]));
        }
      } // validate interval


      if (typeof job.interval !== 'undefined') {
        try {
          job.interval = this.parseValue(job.interval);
        } catch (err) {
          errors.push(combineErrors([new Error("".concat(prefix, " had an invalid interval of ").concat(job.interval)), err]));
        }
      } // validate hasSeconds


      if (typeof job.hasSeconds !== 'undefined' && typeof job.hasSeconds !== 'boolean') errors.push(new Error("".concat(prefix, " had hasSeconds value of ").concat(job.hasSeconds, " (it must be a Boolean)"))); // validate cronValidate

      if (typeof job.cronValidate !== 'undefined' && (0, _typeof2.default)(job.cronValidate) !== 'object') errors.push(new Error("".concat(prefix, " had cronValidate value set, but it must be an Object"))); // if `hasSeconds` was `true` then set `cronValidate` and inherit any existing options

      if (job.hasSeconds) {
        var preset = job.cronValidate && job.cronValidate.preset ? job.cronValidate.preset : this.config.cronValidate && this.config.cronValidate.preset ? this.config.cronValidate.preset : 'default';

        var override = _objectSpread(_objectSpread(_objectSpread({}, this.config.cronValidate && this.config.cronValidate.override ? this.config.cronValidate.override : {}), job.cronValidate && job.cronValidate.override ? job.cronValidate.override : {}), {}, {
          useSeconds: true
        });

        job.cronValidate = _objectSpread(_objectSpread(_objectSpread({}, this.config.cronValidate), job.cronValidate), {}, {
          preset: preset,
          override: override
        });
      } // validate cron


      if (typeof job.cron !== 'undefined') {
        if (this.isSchedule(job.cron)) {
          job.interval = job.cron; // delete job.cron;
        } else {
          //
          // validate cron pattern
          // (must support patterns such as `* * L * *` and `0 0/5 14 * * ?` (and aliases too)
          //
          //  <https://github.com/Airfooox/cron-validate/issues/67>
          //
          var result = cron(job.cron, typeof job.cronValidate === 'undefined' ? this.config.cronValidate : job.cronValidate);

          if (result.isValid()) {
            job.interval = later.parse.cron(job.cron, boolean(typeof job.hasSeconds === 'undefined' ? this.config.hasSeconds : job.hasSeconds)); // NOTE: it is always valid
            // const schedule = later.schedule(
            //   later.parse.cron(
            //     job.cron,
            //     boolean(
            //       typeof job.hasSeconds === 'undefined'
            //         ? this.config.hasSeconds
            //         : job.hasSeconds
            //     )
            //   )
            // );
            // if (schedule.isValid()) {
            //   job.interval = schedule;
            // } // else {
            //   errors.push(
            //     new Error(
            //       `${prefix} had an invalid cron schedule (see <https://crontab.guru> if you need help)`
            //     )
            //   );
            // }
          } else {
            var _iterator = _createForOfIteratorHelper(result.getError()),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var message = _step.value;
                errors.push(new Error("".concat(prefix, " had an invalid cron pattern: ").concat(message)));
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
      } // validate closeWorkerAfterMs


      if (typeof job.closeWorkerAfterMs !== 'undefined' && (!Number.isFinite(job.closeWorkerAfterMs) || job.closeWorkerAfterMs <= 0)) errors.push(new Error("".concat(prefix, " had an invalid closeWorkersAfterMs value of ").concat(job.closeWorkersAfterMs, " (it must be a finite number > 0)")));
      if (errors.length > 0) throw combineErrors(errors); // if timeout was undefined, cron was undefined,
      // and date was undefined then set the default
      // (as long as the default timeout is >= 0)

      if (Number.isFinite(this.config.timeout) && this.config.timeout >= 0 && typeof job.timeout === 'undefined' && typeof job.cron === 'undefined' && typeof job.date === 'undefined' && typeof job.interval === 'undefined') job.timeout = this.config.timeout; // if interval was undefined, cron was undefined,
      // and date was undefined then set the default
      // (as long as the default interval is > 0, or it was a schedule, or it was valid)

      if ((Number.isFinite(this.config.interval) && this.config.interval > 0 || this.isSchedule(this.config.interval)) && typeof job.interval === 'undefined' && typeof job.cron === 'undefined' && typeof job.date === 'undefined') job.interval = this.config.interval;
      return job;
    }
  }, {
    key: "getHumanToMs",
    value: function getHumanToMs(_value) {
      var value = humanInterval(_value);
      if (Number.isNaN(value)) return ms(_value);
      return value;
    }
  }, {
    key: "parseValue",
    value: function parseValue(value) {
      if (value === false) return value;
      if (this.isSchedule(value)) return value;

      if (isSANB(value)) {
        var schedule = later.schedule(later.parse.text(value));
        if (schedule.isValid()) return later.parse.text(value);
        value = this.getHumanToMs(value);
      }

      if (!Number.isFinite(value) || value < 0) throw new Error("Value ".concat(value, " must be a finite number >= 0 or a String parseable by `later.parse.text` (see <https://breejs.github.io/later/parsers.html#text> for examples)"));
      return value;
    }
  }, {
    key: "isSchedule",
    value: function isSchedule(value) {
      return (0, _typeof2.default)(value) === 'object' && Array.isArray(value.schedules);
    }
  }, {
    key: "getWorkerMetadata",
    value: function getWorkerMetadata(name) {
      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var job = this.config.jobs.find(function (j) {
        return j.name === name;
      });
      if (!job) throw new Error("Job \"".concat(name, "\" does not exist"));
      if (!this.config.outputWorkerMetadata && !job.outputWorkerMetadata) return meta && (typeof meta.err !== 'undefined' || typeof meta.message !== 'undefined') ? meta : undefined;
      return this.workers[name] ? _objectSpread(_objectSpread({}, meta), {}, {
        worker: {
          isMainThread: this.workers[name].isMainThread,
          resourceLimits: this.workers[name].resourceLimits,
          threadId: this.workers[name].threadId
        }
      }) : meta;
    }
  }, {
    key: "run",
    value: function run(name) {
      var _this2 = this;

      debug('run', name);

      if (name) {
        this.config.logger.info(new Date());
        var job = this.config.jobs.find(function (j) {
          return j.name === name;
        });
        if (!job) throw new Error("Job \"".concat(name, "\" does not exist"));
        if (this.workers[name]) return this.config.logger.warn(new Error("Job \"".concat(name, "\" is already running")), this.getWorkerMetadata(name));
        debug('starting worker', name);

        var object = _objectSpread(_objectSpread(_objectSpread({}, this.config.worker ? this.config.worker : {}), job.worker ? job.worker : {}), {}, {
          workerData: _objectSpread(_objectSpread({
            job: job
          }, this.config.worker && this.config.worker.workerData ? this.config.worker.workerData : {}), job.worker && job.worker.workerData ? job.worker.workerData : {})
        });

        this.workers[name] = new threads.Worker(job.path, object);
        this.emit('worker created', name);
        debug('worker started', name); // if we specified a value for `closeWorkerAfterMs`
        // then we need to terminate it after that execution time

        var closeWorkerAfterMs = Number.isFinite(job.closeWorkerAfterMs) ? job.closeWorkerAfterMs : this.config.closeWorkerAfterMs;

        if (Number.isFinite(closeWorkerAfterMs) && closeWorkerAfterMs > 0) {
          debug('worker has close set', name, closeWorkerAfterMs);
          this.closeWorkerAfterMs[name] = setTimeout(function () {
            if (_this2.workers[name]) {
              _this2.workers[name].terminate();
            }
          }, closeWorkerAfterMs);
        }

        var prefix = "Worker for job \"".concat(name, "\"");
        this.workers[name].on('online', function () {
          _this2.config.logger.info("".concat(prefix, " online"), _this2.getWorkerMetadata(name));
        });
        this.workers[name].on('message', function (message) {
          if (message === 'done') {
            _this2.config.logger.info("".concat(prefix, " signaled completion"), _this2.getWorkerMetadata(name));

            _this2.workers[name].removeAllListeners('message');

            _this2.workers[name].removeAllListeners('exit');

            _this2.workers[name].terminate();

            delete _this2.workers[name];
            return;
          }

          _this2.config.logger.info("".concat(prefix, " sent a message"), _this2.getWorkerMetadata(name, {
            message: message
          }));
        }); // NOTE: you cannot catch messageerror since it is a Node internal
        //       (if anyone has any idea how to catch this in tests let us know)

        /* istanbul ignore next */

        this.workers[name].on('messageerror', function (err) {
          _this2.config.logger.error("".concat(prefix, " had a message error"), _this2.getWorkerMetadata(name, {
            err: err
          }));
        });
        this.workers[name].on('error', function (err) {
          _this2.config.logger.error("".concat(prefix, " had an error"), _this2.getWorkerMetadata(name, {
            err: err
          }));
        });
        this.workers[name].on('exit', function (code) {
          _this2.config.logger[code === 0 ? 'info' : 'error']("".concat(prefix, " exited with code ").concat(code), _this2.getWorkerMetadata(name));

          delete _this2.workers[name];

          _this2.emit('worker deleted', name);
        });
        return;
      }

      var _iterator2 = _createForOfIteratorHelper(this.config.jobs),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _job = _step2.value;
          this.run(_job.name);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "start",
    value: function start(name) {
      var _this3 = this;

      debug('start', name);

      if (name) {
        var job = this.config.jobs.find(function (j) {
          return j.name === name;
        });
        if (!job) throw new Error("Job ".concat(name, " does not exist"));
        if (this.timeouts[name] || this.intervals[name]) return this.config.logger.warn(new Error("Job \"".concat(name, "\" is already started")));
        debug('job', job); // check for date and if it is in the past then don't run it

        if (job.date instanceof Date) {
          debug('job date', job);

          if (job.date.getTime() < Date.now()) {
            debug('job date was in the past');
            return;
          }

          this.timeouts[name] = setTimeout(function () {
            _this3.run(name);

            if (_this3.isSchedule(job.interval)) {
              debug('job.interval is schedule', job);
              _this3.intervals[name] = later.setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            } else if (Number.isFinite(job.interval) && job.interval > 0) {
              debug('job.interval is finite', job);
              _this3.intervals[name] = setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            }
          }, job.date.getTime() - Date.now());
          return;
        } // this is only complex because both timeout and interval can be a schedule


        if (this.isSchedule(job.timeout)) {
          debug('job timeout is schedule', job);
          this.timeouts[name] = later.setTimeout(function () {
            _this3.run(name);

            if (_this3.isSchedule(job.interval)) {
              debug('job.interval is schedule', job);
              _this3.intervals[name] = later.setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            } else if (Number.isFinite(job.interval) && job.interval > 0) {
              debug('job.interval is finite', job);
              _this3.intervals[name] = setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            }
          }, job.timeout);
          return;
        }

        if (Number.isFinite(job.timeout)) {
          debug('job timeout is finite', job);
          this.timeouts[name] = setTimeout(function () {
            _this3.run(name);

            if (_this3.isSchedule(job.interval)) {
              debug('job.interval is schedule', job);
              _this3.intervals[name] = later.setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            } else if (Number.isFinite(job.interval) && job.interval > 0) {
              debug('job.interval is finite', job.interval);
              _this3.intervals[name] = setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            }
          }, job.timeout);
        } else if (this.isSchedule(job.interval)) {
          debug('job.interval is schedule', job);
          this.intervals[name] = later.setInterval(function () {
            return _this3.run(name);
          }, job.interval);
        } else if (Number.isFinite(job.interval) && job.interval > 0) {
          debug('job.interval is finite', job);
          this.intervals[name] = setInterval(function () {
            return _this3.run(name);
          }, job.interval);
        }

        return;
      }

      var _iterator3 = _createForOfIteratorHelper(this.config.jobs),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _job2 = _step3.value;
          this.start(_job2.name);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "stop",
    value: function () {
      var _stop = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(name) {
        var _this4 = this;

        var _iterator4, _step4, job;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!name) {
                  _context.next = 6;
                  break;
                }

                if (this.timeouts[name]) {
                  if ((0, _typeof2.default)(this.timeouts[name]) === 'object' && typeof this.timeouts[name].clear === 'function') this.timeouts[name].clear();
                  delete this.timeouts[name];
                }

                if (this.intervals[name]) {
                  if ((0, _typeof2.default)(this.intervals[name]) === 'object' && typeof this.intervals[name].clear === 'function') this.intervals[name].clear();
                  delete this.intervals[name];
                }

                if (this.workers[name]) {
                  this.workers[name].once('message', function (message) {
                    if (message === 'cancelled') {
                      _this4.config.logger.info("Gracefully cancelled worker for job \"".concat(name, "\""), _this4.getWorkerMetadata(name));

                      _this4.workers[name].terminate();
                    }
                  });
                  this.workers[name].postMessage('cancel');
                }

                if (this.closeWorkerAfterMs[name]) {
                  if ((0, _typeof2.default)(this.closeWorkerAfterMs[name]) === 'object' && typeof this.closeWorkerAfterMs[name].clear === 'function') this.closeWorkerAfterMs[name].clear();
                  delete this.closeWorkerAfterMs[name];
                }

                return _context.abrupt("return", pWaitFor(function () {
                  return _this4.workers[name] === undefined;
                }));

              case 6:
                _iterator4 = _createForOfIteratorHelper(this.config.jobs);

                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    job = _step4.value;
                    this.stop(job.name);
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }

                return _context.abrupt("return", pWaitFor(function () {
                  return Object.keys(_this4.workers).length === 0;
                }));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function stop(_x) {
        return _stop.apply(this, arguments);
      }

      return stop;
    }()
  }, {
    key: "add",
    value: function add(jobs) {
      //
      // make sure jobs is an array
      //
      if (!Array.isArray(jobs)) jobs = [jobs];
      var errors = [];

      var _iterator5 = _createForOfIteratorHelper(jobs.entries()),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = (0, _slicedToArray2.default)(_step5.value, 2),
              i = _step5$value[0],
              job_ = _step5$value[1];

          try {
            var job = this.validateJob(job_, i, true);
            this.config.jobs.push(job);
          } catch (err) {
            errors.push(err);
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      debug('jobs added', this.config.jobs); // if there were any errors then throw them

      if (errors.length > 0) throw combineErrors(errors);
    }
  }, {
    key: "remove",
    value: function remove(name) {
      var job = this.config.jobs.find(function (j) {
        return j.name === name;
      });
      if (!job) throw new Error("Job \"".concat(name, "\" does not exist"));
      this.config.jobs = this.config.jobs.filter(function (j) {
        return j.name !== name;
      }); // make sure it also closes any open workers

      this.stop(name);
    }
  }]);
  return Bree;
}(EventEmitter); // expose bthreads (useful for tests)
// https://github.com/chjj/bthreads#api


Bree.threads = {
  backend: threads.backend,
  browser: threads.browser,
  location: threads.location,
  filename: threads.filename,
  dirname: threads.dirname,
  require: threads.require,
  resolve: threads.resolve,
  exit: threads.exit,
  cores: threads.cores
};
module.exports = Bree;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,